// Code generated by MockGen-style template. DO NOT EDIT.
// This file provides a gomock-style mock for the sqsAPI interface in producer.go

package producer

import (
    "context"
    "reflect"

    "github.com/aws/aws-sdk-go-v2/service/sqs"
    "go.uber.org/mock/gomock"
)

// MocksqsAPI is a mock of sqsAPI interface.
type MocksqsAPI struct {
    ctrl     *gomock.Controller
    recorder *MocksqsAPIMockRecorder
}

// MocksqsAPIMockRecorder is the mock recorder for MocksqsAPI.
type MocksqsAPIMockRecorder struct {
    mock *MocksqsAPI
}

// NewMocksqsAPI creates a new mock instance.
func NewMocksqsAPI(ctrl *gomock.Controller) *MocksqsAPI {
    mock := &MocksqsAPI{ctrl: ctrl}
    mock.recorder = &MocksqsAPIMockRecorder{mock}
    return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksqsAPI) EXPECT() *MocksqsAPIMockRecorder { return m.recorder }

// SendMessage mocks base method.
func (m *MocksqsAPI) SendMessage(ctx context.Context, params *sqs.SendMessageInput, optFns ...func(*sqs.Options)) (*sqs.SendMessageOutput, error) {
    m.ctrl.T.Helper()
    varargs := []any{ctx, params}
    for _, a := range optFns {
        varargs = append(varargs, a)
    }
    ret := m.ctrl.Call(m, "SendMessage", varargs...)
    ret0, _ := ret[0].(*sqs.SendMessageOutput)
    ret1, _ := ret[1].(error)
    return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MocksqsAPIMockRecorder) SendMessage(ctx, params any, optFns ...any) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    varargs := append([]any{ctx, params}, optFns...)
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MocksqsAPI)(nil).SendMessage), varargs...)
}

